getwd()
setwd("programando/erre/aprendendoerre/")
#criação
vetor <- c(1,2,3,4)
vetor2 <- c(3,2,1)
vetor3 <- (vetor,vetor2)
vetor3 <- c(vetor,vetor2)
vetor4 <- req(0,100)
vetor4 <- rep(0,100)
vetor5 <- seq(a,b,c)
vetor5 <- seq("a","b","c")
vetor5 <- seq("a","b",2)
(2,3,5)
vetor6 <- (TRUE, FALSE, TRUE, FALSE)
vetor6 <- (TRUE, FALSE, TRUE, FALSE)
vetor6 <- c(TRUE, FALSE, TRUE, FALSE)
vetor7 <- c("Um","vetor","de","String")
vetor8 <- rep(v,3)
vetor8 <- rep(vetor5,3)
#repeticao vetor
vetor5 <- c(2,3,5)
vetor8 <- rep(vetor5,3)
vetor9 <- rep(c(1,2,3), 1:3)
vetor9 <- rep(c(1,2,3), 1:7)
vetor9 <- rep(c(1,2,3), 1:2)
vetor9 <- rep(c(1,2,3), 1:3)
(c(1,2,3), each=3)
vetor10 <- rep(c(1,2,3), each=3)
1:5
vetor11 <- seq(1,5,2)
vetor11 <- seq(1,5,1)
vetor11 <- seq(1,5,0)
vetor11 <- seq(1,5,0.1)
vetor11 <- seq(1,5,1)
summary(vetor)
#indexação númerica, acesso via indice.
vetor[2]
vetor[c(1,2)]
#criação
vetor <- c(1,2,3,4,4,5)
v[1:3]
vetor[1:3]
('a','b','c','d')
#indexação lógica.
boat.names <-c("a","b","c","d")
boat.colors <- c("black","green","pink","blue")
boat.ages <- c(53,87,54,66)
boat.costs <- c(52,80,20,100)
boat.ages >100
boat.ages <- c(143,53,356,23)
boat.ages >100
boat.names == "c"
boat.names > boat.costs
boat.names == boat.costs
boat.names != boat.costs
boat.prices[boat.ages>100] #todos que são maior que 100
boat.costs[boat.ages>100] #todos que são maior que 100
boat.names[boat.ages>100]
boat.costs>70 | boat.costs<40
boat.colors=="blue" & boat.costs>80
#%in%
x <-c("a","b","c","e","z")
x %in% c("a","b","c","d")
#wich = quais
v <- c(1,1,1,10,10)
which(v>3)
v[which(v>3)]
x <- c(1,2,3,-5,-5,-5,-5)
sum (x>0) #conta maiores que 0
mean(x>0) #porcentagem dos maiores que 0
#nomes
x<-1:3
names(x) #NULL
x["um"]
names(x) <- c("um","dois","três")
x["um"]
names(x)
#alterar elemento
v <-c(2,3,0,5)
v[2]<-0
v
v<3
v[v<3] <-1
#criando vetor vazio
v <- vector(mode = "numeric", length = 3)
v[1]<-1
v<-c(v,5)
v
v <- c(1,2,3,NA,6)
is.na(v)
mean(v)
mean(v,na.rm = TRUE)
mean(v)
#Escore padronizado
#normalizar váriaveis
#colocar em escala comum para poder comparar
#padronizar um vetor é subtrair o vetor pela MÉDIA e divdir o resultado pelo desvio padrão do vetor
a<- c(5,3,7,5,5,3,4)
mean(a)
sd(a)
a.z <- (a-mean(a))/sd(a)
a.z
piratas<-c("Heidel","Andrew","Becki","Maidsen", "David")
beber<-c(12,8,1,6,2)
escalada<-c(100,520,430,200,700)
#padronizar a variavel beber
beber.n <- (beber-mean(beber))/sd(beber)
#padronizar a variavel escalada
escalada <- (escalada-mean(escalada))/sd(escalada)
media <-beber.n+escalada.n/2
escalada<-c(100,520,430,200,700)
#padronizar a variavel beber
beber.n <- (beber-mean(beber))/sd(beber)
#padronizar a variavel escalada
escalada.n <- (escalada-mean(escalada))/sd(escalada)
media <-beber.n+escalada.n/2
max(media)
piratas[max(media)==media]
v <- c("M","F","F","F","M","M")
a<-factor(v)
levels(a)
table(a)
#ordenar fatores
week= c("sunday","monday","tuesday","wednesday","thursday","friday","saturday","wednesday","tuesday","thursday","wednesday"
week<-factor(week, ordered=T)
#ordenar fatores
week= c("sunday","monday","tuesday","wednesday","thursday","friday","saturday","wednesday","tuesday","thursday","wednesday")
week<-factor(week, ordered=T)
table(week)
week_ordered = factor(week,levels=c("sunday","monday","tuesday","wednesday","thursday","friday","saturday"), ordered= TRUE)
table(week_ordered)
x <- factor(c("solteiro","casado","casado","solteiro"))
x
x[3]
x[c(2,4)]
x[-1]
levels(x)[1]
x<-factor(x, levels = c("solteiro","casado","divorciado"))
x[2] <- "divorciado"
x[3] <- "viuvo" #não pode atribuir valores fora dos levels
levels(x)<-c(levels(x),"viuvo")
x[2] <- "viuvo"
x <- factor(c("solteiro","casado","casado","solteiro"))
x<-factor(x, levels = c("solteiro","casado","divorciado"))
x[2] <- "divorciado"
x[3] <- "viuvo"
levels(x) <- c(levels(x),"viuvo")
x[3] <- "viuvo"
levels(x)[1]<-"não casado"
levels(x) <- c(levels(x),"uniao estavel")
x[4] <- "uniao estavel"
levels(x) <- c(levels(x),"nao casado")
levels(x)
x[2] <-"solteiro"
x<-factor(x, levels = c("solteiro","casado","divorciado"))
x[2] <- "divorciado"
x[3] <- "viuvo"
levels(x) <- c(levels(x),"viuvo")
x[3] <- "viuvo"
levels(x)[1]<-"não casado"
levels(x) <- c(levels(x),"uniao estavel")
x[4] <- "uniao estavel"
x[2] <-"solteiro"
levels(x)
x <- factor(c("solteiro","casado","casado","solteiro"))
levels(x)
x[2] <-"solteiro"
levels(x)[1]<-"não casado"
levels(x)
"
levels(x)
levels(x)
levels(x) <- c(levels(x),"nao casado")
x <- factor(c("solteiro","casado","casado","solteiro"))
x<-factor(x, levels = c("solteiro","casado","divorciado"))
x[2] <- "divorciado"
x[3] <- "viuvo"
x <- factor(c("solteiro","casado","casado","solteiro"))
x<-factor(x, levels = c("solteiro","casado","divorciado"))
x[2] <- "divorciado"
x[3] <- "viuvo"
levels(x)
"
levels(x)
x[2] <-"solteiro"
levels(x) <- c(levels(x),"nao casado")
levels(x)
levels(x)[1]<-"não casado"
levels(x)
myList <-list(Nome="Renan",CPF=0000000, resp=c(TRUE,FALSE,TRUE))
myList <-list(Nome="Renan",CPF=0000000, resp=c(TRUE,FALSE,TRUE))
myList
str(myList)
#acessando elementos
myList[2]
myList[c(T,F,T)]
myList$Nome
myList[[3]][3]
myList[c(T,F,F)]
myList$Nome
myList[[3]][3]
myList[c(T,F,T)]
myList$Nome
myList[[3]][3]
#alterando elementos
myList[2]<- 11111111
myList
myList[[3]][2]<-TRUE
myList[3]
myList[[3]]
gc()
AvRuralinda <-list(Nome="joão",cpf=000000, def=c("Respeito","Compromisso","Amizade"))
str(AvRuralinda)
#nomes
names(AvRuralinda)
#acessar elementos da lista
AvRuralinda$Nome
AvRuralinda[3]
AvRuralinda[[3]][1]
View(AvRuralinda)
#alterando elementos
AvRuralinda[[3]][3]<-"Amor"
AvRuralinda[[3]][3]
#deletar elementos
AvRuralinda[2]<-NULL
#adicionar elementos
AvRuralinda$CPF<-111111
str(AvRuralinda)
x<-unlist(AvRuralinda)
x
xx <-c(TRUE,2)
xx
x <- 1:4
y <- 2:3
x * y
participantes<- c("Maria","Joana")
abdominais <- c(42,38)
salto <- c(102,173)
suspensao<- c(38,71)
correr<- c(2149,1554)
conhecimento<- c(97,70)
abdominais.n <- ((abdominais-30)/6)
abdominais.n <- ((abdominais-30)/6)
salto.n <- ((salto-155)/23)
suspensao.n <- ((suspensao-50)/8)
correr.n <- ((correr-1829)/274)
conhecimento.n <- ((conhecimento-75)/12)
media <- (abdominais.n+salto.n+suspensao.n+correr.n+conhecimento.n)/5
participantes[max(media)==media]
load(“vetor.RData”)
sw
getwd() #onde estou
getwd()
setwd("/aula2")
setwd("\aula2")
setwd("/aula2")
setwd("aula2")
()
getwd()
setwd("aula2")
load(“vetor.RData”)
load("vetor.RData")
notas<-load("vetor.RData")
mean(notas)
mean(notas)
mean(vetor01)
max(vetor01)
max(notas)
max(vetor01)
mean(vetor01, na.rm=TRUE)
mean(vetor01, na.rm=FALSE)
mean(vetor01, na.rm=TRUE)
summary(vetor01, na.rm=TRUE)
summary(vetor01, na.rm=FALSE)
summary(vetor01, na.rm=FALSE)
sd(vetor01, na.rm = TRUE)
sd(vetor01, na.rm = FALSE)
TRUE
sd(vetor01, na.rm = TRUE)
mean(vetor01==NA)
mean(vetor01==NA)
mean(vetor01=NA)
mean(vetor01!=NA)
mean(vetor01.isNA)
mean(is.na(vetor01))
mean(vetor01>7.00&vetor01<8.00)
mean(vetor01>7.00&vetor01<8.00)
mean(vetor01>7.00&vetor01<8.00, na.rm = FALSE)
mean(vetor01>7.00&vetor01<8.00, na.rm = TRUE)
sum(vetor01>7.00&vetor01<8.00, na.rm = TRUE)
sum(vetor01>9.00|vetor01<1.00, na.rm = TRUE)
vetor01 <- vetor01[!is.na(vetor01)]
summary(vetor01)
notas<-load("vetor.RData")
vetor01 <- vetor01[is.na(vetor01)]
notas<-load("vetor.RData")
vetor01 <- !is.na(vetor01)
notas<-load("vetor.RData")
vetor01[!is.na(vetor01)] -> vetor01
notas<-load("vetor.RData")
vetor01 <- vetor01[-which(is.na(vetor01))]
notas<-load("vetor.RData")
vetor01 <- vetor01[which(is.na(vetor01))]
#matriz
matrix(0,3,4) #elementos, numero de linhas, numero de colunas
#matriz
v<-matrix(0,3,4) #elementos, numero de linhas, numero de colunas
dim(v)
a<-matrix(1:12,3,4)
dim(a)
nrow(a)
ncol(a)
